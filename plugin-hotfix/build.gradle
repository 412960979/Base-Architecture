plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.wn.hotfix'
    id 'com.wn.plugin'
    id 'com.wn.version'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.com.example.plugin_hotfix"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.com.example.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.com.example.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.com.example.test.espresso:espresso-core:3.3.0'
}

//===============获取dex文件========================
// afterEvaluate表示在构建的时候解析完build.gradle文件在执行我们的代码
afterEvaluate {
    android.applicationVariants.all { variant ->// 对构建变体进行便利 debug/release,渠道包等等
        String variantName = variant.getName().capitalize()// 获取构建变体的名字并且对首字母大写, 是为了查找获取task

        // 这个任务就是，打包时包jar和class文件打包成dex文件的任务
        Task dexTask = project.getTasks().findByName("transformClassesWithDexBuilderFor" + variantName)

        /* doFirst在任务执行之前执行，doLast在任务执行之后执行,
        在编译成dex文件这个任务执行之前执行字节码插桩*/
        if (dexTask != null) {
            dexTask.doFirst {
                // 获取class和jar文件
                Set<File> files = dexTask.getInputs().getFiles().getFiles()

                for (File file : files) {
                    // .jar 解压-插桩-压缩回去替换插桩前的class
                    // .class 插桩

                    String filePath = file.getAbsolutePath()
                    // 依赖的库会以jar包形式传过来，对依赖库也进行插桩
                    if (filePath.endsWith(".jar")) {

                    } else if (filePath.endsWith(".class")){

                    }
                }
            }
        }
    }
}
//=================================================

people {
    name "weining"
    age 30
}






































